//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace iSee
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace iSee.iSee_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::iSee.iSee_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::iSee.iSee_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[31];
            _typeNameTable[0] = "XP.Shadow";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[2] = "Double";
            _typeNameTable[3] = "Int32";
            _typeNameTable[4] = "iSee.MovieDetail";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[7] = "iSee.MovieRecommend";
            _typeNameTable[8] = "ImageLib.Controls.ImageView";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "System.Uri";
            _typeNameTable[11] = "Object";
            _typeNameTable[12] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[13] = "Boolean";
            _typeNameTable[14] = "iSee.TheRecentHit";
            _typeNameTable[15] = "iSee.CoverWidthConvert";
            _typeNameTable[16] = "iSee.WantToSee";
            _typeNameTable[17] = "iSee.AlreadySeen";
            _typeNameTable[18] = "iSee.ScenarioBindingConverter";
            _typeNameTable[19] = "iSee.ScenarioBindingConverterSymbol";
            _typeNameTable[20] = "iSee.MainPage";
            _typeNameTable[21] = "System.Collections.Generic.List`1<iSee.Scenario>";
            _typeNameTable[22] = "iSee.Scenario";
            _typeNameTable[23] = "System.Type";
            _typeNameTable[24] = "iSee.RegisterContentDialog";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.ContentDialog";
            _typeNameTable[26] = "iSee.RegistResult";
            _typeNameTable[27] = "System.Enum";
            _typeNameTable[28] = "System.ValueType";
            _typeNameTable[29] = "iSee.SignInContentDialog";
            _typeNameTable[30] = "iSee.SignInResult";

            _typeTable = new global::System.Type[31];
            _typeTable[0] = typeof(global::XP.Shadow);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[2] = typeof(global::System.Double);
            _typeTable[3] = typeof(global::System.Int32);
            _typeTable[4] = typeof(global::iSee.MovieDetail);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[7] = typeof(global::iSee.MovieRecommend);
            _typeTable[8] = typeof(global::ImageLib.Controls.ImageView);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::System.Uri);
            _typeTable[11] = typeof(global::System.Object);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[13] = typeof(global::System.Boolean);
            _typeTable[14] = typeof(global::iSee.TheRecentHit);
            _typeTable[15] = typeof(global::iSee.CoverWidthConvert);
            _typeTable[16] = typeof(global::iSee.WantToSee);
            _typeTable[17] = typeof(global::iSee.AlreadySeen);
            _typeTable[18] = typeof(global::iSee.ScenarioBindingConverter);
            _typeTable[19] = typeof(global::iSee.ScenarioBindingConverterSymbol);
            _typeTable[20] = typeof(global::iSee.MainPage);
            _typeTable[21] = typeof(global::System.Collections.Generic.List<global::iSee.Scenario>);
            _typeTable[22] = typeof(global::iSee.Scenario);
            _typeTable[23] = typeof(global::System.Type);
            _typeTable[24] = typeof(global::iSee.RegisterContentDialog);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.ContentDialog);
            _typeTable[26] = typeof(global::iSee.RegistResult);
            _typeTable[27] = typeof(global::System.Enum);
            _typeTable[28] = typeof(global::System.ValueType);
            _typeTable[29] = typeof(global::iSee.SignInContentDialog);
            _typeTable[30] = typeof(global::iSee.SignInResult);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Shadow() { return new global::XP.Shadow(); }
        private object Activate_4_MovieDetail() { return new global::iSee.MovieDetail(); }
        private object Activate_7_MovieRecommend() { return new global::iSee.MovieRecommend(); }
        private object Activate_8_ImageView() { return new global::ImageLib.Controls.ImageView(); }
        private object Activate_14_TheRecentHit() { return new global::iSee.TheRecentHit(); }
        private object Activate_15_CoverWidthConvert() { return new global::iSee.CoverWidthConvert(); }
        private object Activate_16_WantToSee() { return new global::iSee.WantToSee(); }
        private object Activate_17_AlreadySeen() { return new global::iSee.AlreadySeen(); }
        private object Activate_18_ScenarioBindingConverter() { return new global::iSee.ScenarioBindingConverter(); }
        private object Activate_19_ScenarioBindingConverterSymbol() { return new global::iSee.ScenarioBindingConverterSymbol(); }
        private object Activate_20_MainPage() { return new global::iSee.MainPage(); }
        private object Activate_21_List() { return new global::System.Collections.Generic.List<global::iSee.Scenario>(); }
        private object Activate_22_Scenario() { return new global::iSee.Scenario(); }
        private object Activate_24_RegisterContentDialog() { return new global::iSee.RegisterContentDialog(); }
        private object Activate_29_SignInContentDialog() { return new global::iSee.SignInContentDialog(); }
        private void VectorAdd_21_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::iSee.Scenario>)instance;
            var newItem = (global::iSee.Scenario)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::iSee.iSee_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  XP.Shadow
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_0_Shadow;
                userType.AddMemberName("CornerRadius");
                userType.AddMemberName("Z_Depth");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Double
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Int32
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  iSee.MovieDetail
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_4_MovieDetail;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  iSee.MovieRecommend
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_MovieRecommend;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  ImageLib.Controls.ImageView
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_8_ImageView;
                userType.AddMemberName("ImageLoaderKey");
                userType.AddMemberName("UriSource");
                userType.AddMemberName("Stretch");
                userType.AddMemberName("IsLoading");
                userType.AddMemberName("PixelWidth");
                userType.AddMemberName("PixelHeight");
                xamlType = userType;
                break;

            case 9:   //  String
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  System.Uri
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  Object
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Boolean
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  iSee.TheRecentHit
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_TheRecentHit;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  iSee.CoverWidthConvert
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_CoverWidthConvert;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  iSee.WantToSee
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_WantToSee;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  iSee.AlreadySeen
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_AlreadySeen;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  iSee.ScenarioBindingConverter
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_ScenarioBindingConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  iSee.ScenarioBindingConverterSymbol
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_ScenarioBindingConverterSymbol;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  iSee.MainPage
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_MainPage;
                userType.AddMemberName("Scenarios");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  System.Collections.Generic.List`1<iSee.Scenario>
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_21_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  iSee.Scenario
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_Scenario;
                userType.AddMemberName("Symbol");
                userType.AddMemberName("Title");
                userType.AddMemberName("ClassType");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  System.Type
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  iSee.RegisterContentDialog
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_24_RegisterContentDialog;
                userType.AddMemberName("Result");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.ContentDialog
                xamlType = new global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  iSee.RegistResult
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("RegistOK", global::iSee.RegistResult.RegistOK);
                userType.AddEnumValue("RegistFail", global::iSee.RegistResult.RegistFail);
                userType.AddEnumValue("RegistCancel", global::iSee.RegistResult.RegistCancel);
                userType.AddEnumValue("Nothing", global::iSee.RegistResult.Nothing);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  System.Enum
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 28:   //  System.ValueType
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 29:   //  iSee.SignInContentDialog
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_29_SignInContentDialog;
                userType.AddMemberName("Result");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  iSee.SignInResult
                userType = new global::iSee.iSee_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("SignInOK", global::iSee.SignInResult.SignInOK);
                userType.AddEnumValue("SignInFail", global::iSee.SignInResult.SignInFail);
                userType.AddEnumValue("SignInCancel", global::iSee.SignInResult.SignInCancel);
                userType.AddEnumValue("Nothing", global::iSee.SignInResult.Nothing);
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::ImageLib.Controls.ImageLib_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::XP.XPShadow_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Shadow_CornerRadius(object instance)
        {
            var that = (global::XP.Shadow)instance;
            return that.CornerRadius;
        }
        private void set_0_Shadow_CornerRadius(object instance, object Value)
        {
            var that = (global::XP.Shadow)instance;
            that.CornerRadius = (global::System.Double)Value;
        }
        private object get_1_Shadow_Z_Depth(object instance)
        {
            var that = (global::XP.Shadow)instance;
            return that.Z_Depth;
        }
        private void set_1_Shadow_Z_Depth(object instance, object Value)
        {
            var that = (global::XP.Shadow)instance;
            that.Z_Depth = (global::System.Int32)Value;
        }
        private object get_2_ImageView_ImageLoaderKey(object instance)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            return that.ImageLoaderKey;
        }
        private void set_2_ImageView_ImageLoaderKey(object instance, object Value)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            that.ImageLoaderKey = (global::System.String)Value;
        }
        private object get_3_ImageView_UriSource(object instance)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            return that.UriSource;
        }
        private void set_3_ImageView_UriSource(object instance, object Value)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            that.UriSource = (global::System.Uri)Value;
        }
        private object get_4_ImageView_Stretch(object instance)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            return that.Stretch;
        }
        private void set_4_ImageView_Stretch(object instance, object Value)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_5_ImageView_IsLoading(object instance)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            return that.IsLoading;
        }
        private void set_5_ImageView_IsLoading(object instance, object Value)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            that.IsLoading = (global::System.Boolean)Value;
        }
        private object get_6_ImageView_PixelWidth(object instance)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            return that.PixelWidth;
        }
        private object get_7_ImageView_PixelHeight(object instance)
        {
            var that = (global::ImageLib.Controls.ImageView)instance;
            return that.PixelHeight;
        }
        private object get_8_MainPage_Scenarios(object instance)
        {
            var that = (global::iSee.MainPage)instance;
            return that.Scenarios;
        }
        private object get_9_Scenario_Symbol(object instance)
        {
            var that = (global::iSee.Scenario)instance;
            return that.Symbol;
        }
        private void set_9_Scenario_Symbol(object instance, object Value)
        {
            var that = (global::iSee.Scenario)instance;
            that.Symbol = (global::System.String)Value;
        }
        private object get_10_Scenario_Title(object instance)
        {
            var that = (global::iSee.Scenario)instance;
            return that.Title;
        }
        private void set_10_Scenario_Title(object instance, object Value)
        {
            var that = (global::iSee.Scenario)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_11_Scenario_ClassType(object instance)
        {
            var that = (global::iSee.Scenario)instance;
            return that.ClassType;
        }
        private void set_11_Scenario_ClassType(object instance, object Value)
        {
            var that = (global::iSee.Scenario)instance;
            that.ClassType = (global::System.Type)Value;
        }
        private object get_12_RegisterContentDialog_Result(object instance)
        {
            var that = (global::iSee.RegisterContentDialog)instance;
            return that.Result;
        }
        private object get_13_SignInContentDialog_Result(object instance)
        {
            var that = (global::iSee.SignInContentDialog)instance;
            return that.Result;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::iSee.iSee_XamlTypeInfo.XamlMember xamlMember = null;
            global::iSee.iSee_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "XP.Shadow.CornerRadius":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.Shadow");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "CornerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_Shadow_CornerRadius;
                xamlMember.Setter = set_0_Shadow_CornerRadius;
                break;
            case "XP.Shadow.Z_Depth":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XP.Shadow");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Z_Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Shadow_Z_Depth;
                xamlMember.Setter = set_1_Shadow_Z_Depth;
                break;
            case "ImageLib.Controls.ImageView.ImageLoaderKey":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImageLib.Controls.ImageView");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "ImageLoaderKey", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ImageView_ImageLoaderKey;
                xamlMember.Setter = set_2_ImageView_ImageLoaderKey;
                break;
            case "ImageLib.Controls.ImageView.UriSource":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImageLib.Controls.ImageView");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "UriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ImageView_UriSource;
                xamlMember.Setter = set_3_ImageView_UriSource;
                break;
            case "ImageLib.Controls.ImageView.Stretch":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImageLib.Controls.ImageView");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ImageView_Stretch;
                xamlMember.Setter = set_4_ImageView_Stretch;
                break;
            case "ImageLib.Controls.ImageView.IsLoading":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImageLib.Controls.ImageView");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "IsLoading", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ImageView_IsLoading;
                xamlMember.Setter = set_5_ImageView_IsLoading;
                break;
            case "ImageLib.Controls.ImageView.PixelWidth":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImageLib.Controls.ImageView");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "PixelWidth", "Double");
                xamlMember.Getter = get_6_ImageView_PixelWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "ImageLib.Controls.ImageView.PixelHeight":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ImageLib.Controls.ImageView");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "PixelHeight", "Double");
                xamlMember.Getter = get_7_ImageView_PixelHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "iSee.MainPage.Scenarios":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iSee.MainPage");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Scenarios", "System.Collections.Generic.List`1<iSee.Scenario>");
                xamlMember.Getter = get_8_MainPage_Scenarios;
                xamlMember.SetIsReadOnly();
                break;
            case "iSee.Scenario.Symbol":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iSee.Scenario");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Symbol", "String");
                xamlMember.Getter = get_9_Scenario_Symbol;
                xamlMember.Setter = set_9_Scenario_Symbol;
                break;
            case "iSee.Scenario.Title":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iSee.Scenario");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_10_Scenario_Title;
                xamlMember.Setter = set_10_Scenario_Title;
                break;
            case "iSee.Scenario.ClassType":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iSee.Scenario");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "ClassType", "System.Type");
                xamlMember.Getter = get_11_Scenario_ClassType;
                xamlMember.Setter = set_11_Scenario_ClassType;
                break;
            case "iSee.RegisterContentDialog.Result":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iSee.RegisterContentDialog");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Result", "iSee.RegistResult");
                xamlMember.Getter = get_12_RegisterContentDialog_Result;
                xamlMember.SetIsReadOnly();
                break;
            case "iSee.SignInContentDialog.Result":
                userType = (global::iSee.iSee_XamlTypeInfo.XamlUserType)GetXamlTypeByName("iSee.SignInContentDialog");
                xamlMember = new global::iSee.iSee_XamlTypeInfo.XamlMember(this, "Result", "iSee.SignInResult");
                xamlMember.Getter = get_13_SignInContentDialog_Result;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::iSee.iSee_XamlTypeInfo.XamlSystemBaseType
    {
        global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::iSee.iSee_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

